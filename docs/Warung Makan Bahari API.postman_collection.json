{
	"info": {
		"_postman_id": "8c7045b8-8d25-4b93-b4d7-dc06f5aed8bc",
		"name": "Warung Makan Bahari API",
		"description": "Warung Makan Bahari API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13131423"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 409', function () {",
									"    pm.expect(pm.response.code).to.equal(409);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.paging).to.exist;",
									"})",
									"",
									"pm.test('StatusCode is a non-zero integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.message).to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Data should be null', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.null;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"<string>\",\n\t\"username\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"<string>\",\n\t\"username\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/auth/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"username\": \"<string>\",\n\t\t\"roles\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t]\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Register Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"pm.test(\"Response body contains a statusCode field\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"statusCode should be equal to 0\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Response body contains a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"<string>\",\n\t\"username\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register/admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								"admin"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"password\": \"<string>\",\n\t\"username\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/auth/register/admin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"auth",
										"register",
										"admin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"username\": \"<string>\",\n\t\t\"roles\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t]\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = pm.response.json();\r",
									"pm.collectionVariables.set(\"token\", res.data.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"subowo\",\n    \"password\": \"password_4bc49da488dc\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "[Success]",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"subowo\",\n    \"password\": \"password_4bc49da488dc\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Mar 2024 14:12:36 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"statusCode\": 200,\n    \"message\": \"login successfully\",\n    \"data\": {\n        \"username\": \"subowo\",\n        \"token\": \"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NWExNDZlZC0yM2UyLTQ2NzItOWE5MS0xZjliZGU4ZTIyNTciLCJyb2xlcyI6WyJST0xFX0NVU1RPTUVSIl0sImlzcyI6IldhcnVuZyBNYWthbiBCYWhhcmkiLCJpYXQiOjE3MTAzMzkxNTYsImV4cCI6MTcxMDk0Mzk1Nn0.axFzTgxxydGz7RGBc3HZUM5Ip2bxTBvVpRF3kDUJRY7G4L90Nsfqiam8wKqVSv6YBVeSOJTYZ76w4Zy_FM6efg\",\n        \"roles\": [\n            \"ROLE_CUSTOMER\"\n        ]\n    },\n    \"paging\": null\n}"
						}
					]
				}
			],
			"description": "Auth API"
		},
		{
			"name": "Menu",
			"item": [
				{
					"name": "Get All Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.timestamp).to.exist;",
									"  pm.expect(responseData.status).to.exist;",
									"  pm.expect(responseData.error).to.exist;",
									"  pm.expect(responseData.path).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.timestamp).to.exist;",
									"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0, \"Status should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/menus?page=1&size=10&sortBy=name&direction=asc&name=<string>&minPrice=<long>&maxPrice=<long>&price=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"menus"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "direction",
									"value": "asc"
								},
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "minPrice",
									"value": "<long>"
								},
								{
									"key": "maxPrice",
									"value": "<long>"
								},
								{
									"key": "price",
									"value": "<integer>"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/menus?page=1&size=10&sortBy=name&direction=asc&name=<string>&minPrice=<long>&maxPrice=<long>&price=<integer>",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"menus"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "direction",
											"value": "asc"
										},
										{
											"key": "name",
											"value": "<string>"
										},
										{
											"key": "minPrice",
											"value": "<long>"
										},
										{
											"key": "maxPrice",
											"value": "<long>"
										},
										{
											"key": "price",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"name\": \"<string>\",\n\t\t\t\"price\": \"<integer>\",\n\t\t\t\"imageUrl\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"name\": \"<string>\",\n\t\t\t\"price\": \"<integer>\",\n\t\t\t\"imageUrl\": \"<string>\"\n\t\t}\n\t],\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Update Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('403');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('Access Denied');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.paging).to.exist;",
									"})",
									"",
									"pm.test('Verify that the statusCode field is a non-zero integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.statusCode).to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0);",
									"})",
									"",
									"pm.test('Verify that the \\'message\\' field is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "menu",
									"value": "<string>",
									"description": "(Required) ",
									"type": "text"
								},
								{
									"key": "image",
									"value": "<string>",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/menus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"menus"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "menu",
											"value": "<string>",
											"description": "(Required) ",
											"type": "text"
										},
										{
											"key": "image",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:9000/api/menus",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"menus"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"price\": \"<integer>\",\n\t\t\"imageUrl\": \"<string>\"\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Create Menu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.paging).to.exist;",
									"})",
									"",
									"pm.test('statusCode is a non-zero integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Data should be null', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.null;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "menu",
									"value": "<string>",
									"description": "(Required) ",
									"type": "text"
								},
								{
									"key": "image",
									"value": "<string>",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/menus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"menus"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "menu",
											"value": "<string>",
											"description": "(Required) ",
											"type": "text"
										},
										{
											"key": "image",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:9000/api/menus",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"menus"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"price\": \"<integer>\",\n\t\t\"imageUrl\": \"<string>\"\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Get Menu Picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'statusCode' field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'message' field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' field is null in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'paging' field is null in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.paging).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/products/images/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"images",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/products/images/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"products",
										"images",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "<string>"
						}
					]
				},
				{
					"name": "Delete Menu By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 415\", function () {",
									"  pm.expect(pm.response.code).to.equal(415);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.timestamp).to.exist;",
									"  pm.expect(responseData.status).to.exist;",
									"  pm.expect(responseData.error).to.exist;",
									"  pm.expect(responseData.path).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is a non-zero value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.timestamp).to.exist.and.to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Error message is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Path is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.path).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/menus/:id/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"menus",
								":id",
								"delete"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/menus/:id/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"menus",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				}
			],
			"description": "Menu API"
		},
		{
			"name": "Dinning Table",
			"item": [
				{
					"name": "Get All Dinning Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.paging).to.exist;",
									"})",
									"",
									"pm.test('StatusCode is a non-zero integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0, 'StatusCode should be a non-zero integer');",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Data should be null', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.null;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tables?id=<string>&name=<string>&page=1&size=10&sortBy=name&direction=asc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tables"
							],
							"query": [
								{
									"key": "id",
									"value": "<string>"
								},
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "direction",
									"value": "asc"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/tables?id=<string>&name=<string>&page=1&size=10&sortBy=name&direction=asc",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"tables"
									],
									"query": [
										{
											"key": "id",
											"value": "<string>"
										},
										{
											"key": "name",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "direction",
											"value": "asc"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"name\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"name\": \"<string>\"\n\t\t}\n\t],\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Update Dinning Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.paging).to.exist;",
									"})",
									"",
									"pm.test('Verify that the statusCode is a non-zero value', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.statusCode).to.be.above(0);",
									"})",
									"",
									"pm.test('Verify that the \\'message\\' is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Verify that \\'data\\' field is null', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.null;",
									"})",
									"",
									"pm.test('Verify that \\'paging\\' field is null', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.paging).to.be.null;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"<string>\",\n\t\"name\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tables",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tables"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"<string>\",\n\t\"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/tables",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"tables"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"name\": \"<string>\"\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Create Dinning Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Response includes a statusCode field', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"})",
									"",
									"pm.test('Response includes a message field', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"})",
									"",
									"pm.test('Response includes a data field', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.paging).to.exist;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"<string>\",\n\t\"name\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/tables",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tables"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"<string>\",\n\t\"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/tables",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"tables"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"name\": \"<string>\"\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Delete Dinning Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.paging).to.exist;",
									"})",
									"",
									"pm.test('StatusCode is a non-zero integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number').and.to.not.equal(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"})",
									"",
									"pm.test('Data is null', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.null;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tables/:id/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tables",
								":id",
								"delete"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/tables/:id/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"tables",
										":id",
										"delete"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				}
			],
			"description": "Dinning Table API"
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Update User Status By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is a valid integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.timestamp).to.be.a('number');",
									"    pm.expect(responseData.timestamp % 1).to.be.equal(0, \"Value should be an integer\");",
									"});",
									"",
									"",
									"pm.test(\"Status is a valid integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.be.a('number', \"Status should be a number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/:id/update?status=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":id",
								"update"
							],
							"query": [
								{
									"key": "status",
									"value": "<boolean>",
									"description": "(Required) "
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/users/:id/update?status=<boolean>",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"users",
										":id",
										"update"
									],
									"query": [
										{
											"key": "status",
											"value": "<boolean>",
											"description": "(Required) "
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"phoneNumber\": \"<string>\",\n\t\t\"status\": \"<boolean>\",\n\t\t\"credentialId\": \"<string>\"\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"})",
									"",
									"pm.test('Validate the response body structure', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.data).to.exist.and.to.be.null;",
									"    pm.expect(responseData.paging).to.exist.and.to.be.null;",
									"})",
									"",
									"pm.test('statusCode is a non-zero integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"<string>\",\n\t\"name\": \"<string>\",\n\t\"phoneNumber\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"update"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"<string>\",\n\t\"name\": \"<string>\",\n\t\"phoneNumber\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/users/update",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"users",
										"update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"name\": \"<string>\",\n\t\t\"phoneNumber\": \"<string>\",\n\t\t\"status\": \"<boolean>\",\n\t\t\"credentialId\": \"<string>\"\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Get All User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.timestamp).to.exist;",
									"  pm.expect(responseData.status).to.exist;",
									"  pm.expect(responseData.error).to.exist;",
									"  pm.expect(responseData.path).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is a valid timestamp\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('number');",
									"    pm.expect(new Date(responseData.timestamp)).to.not.be.NaN;",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.be.a('number').and.to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users?name=<string>&phoneNumber=<string>&status=<boolean>&page=1&size=10&sortBy=name&direction=asc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "phoneNumber",
									"value": "<string>"
								},
								{
									"key": "status",
									"value": "<boolean>"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "name"
								},
								{
									"key": "direction",
									"value": "asc"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/users?name=<string>&phoneNumber=<string>&status=<boolean>&page=1&size=10&sortBy=name&direction=asc",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "name",
											"value": "<string>"
										},
										{
											"key": "phoneNumber",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<boolean>"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "size",
											"value": "10"
										},
										{
											"key": "sortBy",
											"value": "name"
										},
										{
											"key": "direction",
											"value": "asc"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"name\": \"<string>\",\n\t\t\t\"phoneNumber\": \"<string>\",\n\t\t\t\"status\": \"<boolean>\",\n\t\t\t\"credentialId\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"name\": \"<string>\",\n\t\t\t\"phoneNumber\": \"<string>\",\n\t\t\t\"status\": \"<boolean>\",\n\t\t\t\"credentialId\": \"<string>\"\n\t\t}\n\t],\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				}
			],
			"description": "User API"
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Get All Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate that trxDate is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    ",
									"    responseData.data.forEach(function(transaction) {",
									"        pm.expect(transaction.trxDate).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'paging' object is null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.paging).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/transactions",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": [\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"trxDate\": \"<dateTime>\",\n\t\t\t\"userId\": \"<string>\",\n\t\t\t\"dinningTableId\": \"<string>\",\n\t\t\t\"transType\": \"<string>\",\n\t\t\t\"billDetails\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\t\"price\": \"<integer>\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\t\"price\": \"<integer>\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"payment\": {\n\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\"token\": \"<string>\",\n\t\t\t\t\"redirectUrl\": \"<string>\",\n\t\t\t\t\"transactionStatus\": \"ORDERED\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"trxDate\": \"<dateTime>\",\n\t\t\t\"userId\": \"<string>\",\n\t\t\t\"dinningTableId\": \"<string>\",\n\t\t\t\"transType\": \"<string>\",\n\t\t\t\"billDetails\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\t\"price\": \"<integer>\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\t\"price\": \"<integer>\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"payment\": {\n\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\"token\": \"<string>\",\n\t\t\t\t\"redirectUrl\": \"<string>\",\n\t\t\t\t\"transactionStatus\": \"SETTLEMENT\"\n\t\t\t}\n\t\t}\n\t],\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Create Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.path).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is a non-zero integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.timestamp).to.be.a('number');",
									"    pm.expect(responseData.timestamp).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-zero integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.status).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Error and path are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
									"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Path should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"<string>\",\n\t\"dinningTableId\": \"<string>\",\n\t\"billDetails\": [\n\t\t{\n\t\t\t\"menuId\": \"<string>\",\n\t\t\t\"qty\": \"<integer>\"\n\t\t},\n\t\t{\n\t\t\t\"menuId\": \"<string>\",\n\t\t\t\"qty\": \"<integer>\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"<string>\",\n\t\"dinningTableId\": \"<string>\",\n\t\"billDetails\": [\n\t\t{\n\t\t\t\"menuId\": \"<string>\",\n\t\t\t\"qty\": \"<integer>\"\n\t\t},\n\t\t{\n\t\t\t\"menuId\": \"<string>\",\n\t\t\t\"qty\": \"<integer>\"\n\t\t}\n\t]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/transactions",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"trxDate\": \"<dateTime>\",\n\t\t\"userId\": \"<string>\",\n\t\t\"dinningTableId\": \"<string>\",\n\t\t\"transType\": \"<string>\",\n\t\t\"billDetails\": [\n\t\t\t{\n\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\"price\": \"<integer>\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\"price\": \"<integer>\"\n\t\t\t}\n\t\t],\n\t\t\"payment\": {\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"token\": \"<string>\",\n\t\t\t\"redirectUrl\": \"<string>\",\n\t\t\t\"transactionStatus\": \"ORDERED\"\n\t\t}\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Update Transaction Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sintd2\": {},\n\t\"sintbd\": {},\n\t\"do5ef\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/transactions/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								"status"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"sintd2\": {},\n\t\"sintbd\": {},\n\t\"do5ef\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:9000/api/transactions/status",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"transactions",
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Get Transaction By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"})",
									"",
									"pm.test('statusCode is a non-zero integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.be.above(0);",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Data should be null', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.null;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/transactions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/transactions/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n\t\"statusCode\": \"<integer>\",\n\t\"message\": \"<string>\",\n\t\"data\": {\n\t\t\"id\": \"<string>\",\n\t\t\"trxDate\": \"<dateTime>\",\n\t\t\"userId\": \"<string>\",\n\t\t\"dinningTableId\": \"<string>\",\n\t\t\"transType\": \"<string>\",\n\t\t\"billDetails\": [\n\t\t\t{\n\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\"price\": \"<integer>\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": \"<string>\",\n\t\t\t\t\"menuId\": \"<string>\",\n\t\t\t\t\"qty\": \"<integer>\",\n\t\t\t\t\"price\": \"<integer>\"\n\t\t\t}\n\t\t],\n\t\t\"payment\": {\n\t\t\t\"id\": \"<string>\",\n\t\t\t\"token\": \"<string>\",\n\t\t\t\"redirectUrl\": \"<string>\",\n\t\t\t\"transactionStatus\": \"ORDERED\"\n\t\t}\n\t},\n\t\"paging\": {\n\t\t\"totalPages\": \"<integer>\",\n\t\t\"totalElement\": \"<long>\",\n\t\t\"page\": \"<integer>\",\n\t\t\"size\": \"<integer>\",\n\t\t\"hasNext\": \"<boolean>\",\n\t\t\"hasPrevious\": \"<boolean>\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Get Transaction Report",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/transactions/report?period=DAILY&fileType=CSV&isSummarized=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								"report"
							],
							"query": [
								{
									"key": "period",
									"value": "DAILY"
								},
								{
									"key": "fileType",
									"value": "CSV"
								},
								{
									"key": "isSummarized",
									"value": "false"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "http://localhost:9000/api/transactions/report?period=DAILY&fileType=CSV&isSummarized=false",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"api",
										"transactions",
										"report"
									],
									"query": [
										{
											"key": "period",
											"value": "DAILY"
										},
										{
											"key": "fileType",
											"value": "CSV"
										},
										{
											"key": "isSummarized",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "<string>"
						}
					]
				}
			],
			"description": "Transaction API"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:9000"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}